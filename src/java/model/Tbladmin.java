package model;
// Generated Sep 30, 2024 2:35:09 PM by Hibernate Tools 4.3.1

import dao.AdminDAO;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.faces.event.PhaseListener;

@ManagedBean
@SessionScoped
/**
 * Tbladmin generated by hbm2java
 */
public class Tbladmin  implements java.io.Serializable, PhaseListener {


     private Integer adminId;
     private String username;
     private String email;
     private String password;
     private String role;

    public Tbladmin() {
    }

    public Tbladmin(String username, String email, String password, String role) {
       this.username = username;
       this.email = email;
       this.password = password;
       this.role = role;
    }
   
    public Integer getAdminId() {
        return this.adminId;
    }
    
    public void setAdminId(Integer adminId) {
        this.adminId = adminId;
    }
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getRole() {
        return this.role;
    }
    
    public void setRole(String role) {
        this.role = role;
    }
    
    public String validasiLogin() {
        AdminDAO uDao = new AdminDAO();
        List<Tbladmin> us = uDao.getBy(username, password);
        if (us != null && !us.isEmpty()) {
            // Simpan username ke session
            this.username = us.get(0).getUsername();
            this.password = us.get(0).getPassword();
            this.role = us.get(0).getRole();
            return "admin?faces-redirect=true"; // Redirect ke halaman admin
        } else {
            FacesContext facesContext = FacesContext.getCurrentInstance();
            if (facesContext != null) {
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, 
                    "Invalid username or password", "Please check your credentials and try again."));
            }
            return "signin.xhtml?faces-redirect=true"; // Kembali ke halaman login
        }
    }

public String logout() {
    FacesContext context = FacesContext.getCurrentInstance();
    if (context != null) {
        context.getExternalContext().invalidateSession();
    } else {
        // Tangani situasi di mana FacesContext adalah null
        // Misalnya, log kesalahan atau lempar pengecualian
    }
    return "/index.xhtml?faces-redirect=true";
    
}

public boolean isLoggedIn() {
    return this.username != null && !this.username.isEmpty();
}

@Override
public void afterPhase(PhaseEvent event) {
    FacesContext facesContext = event.getFacesContext();
    if (facesContext == null) {
        // Tangani situasi di mana FacesContext adalah null
        return; // Keluar dari metode jika FacesContext null
    }
    // (coba kita ganti dulu)FacesContext facesContext = event.getFacesContext();
    String currentPage = facesContext.getViewRoot().getViewId();

    boolean isLoginPage = currentPage.lastIndexOf("signin.xhtml") > -1;
    boolean isPublicPage = currentPage.lastIndexOf("index.xhtml") > -1;
    boolean isRestrictedPage = currentPage.lastIndexOf("nct127.xhtml") > -1 ||
                               currentPage.lastIndexOf("nctu.xhtml") > -1 ||
                               currentPage.lastIndexOf("nctdream.xhtml") > -1 ||
                               currentPage.lastIndexOf("wayv.xhtml") > -1 ||
                               currentPage.lastIndexOf("news.xhtml") > -1 ||
                               currentPage.lastIndexOf("admin.xhtml") > -1;

    if (!isLoggedIn() && isRestrictedPage) {
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, 
            "Restricted Access", "Please log in first to access this page"));
        FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
            .handleNavigation(facesContext, null, "/signin.xhtml?faces-redirect=true");
    }
}

@Override
public void beforePhase(PhaseEvent event) {
    // Tidak perlu implementasi
}

@Override
public PhaseId getPhaseId() {
    return PhaseId.RESTORE_VIEW;
}






}
